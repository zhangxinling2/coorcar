"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const centPerSec = 0.7;
Page({
    data: {
        elapsed: '00:00:00',
        fee: '00',
        location: {
            latitude: 31,
            longitude: 120,
        },
        scal: 12,
    },
    setupLocationUpdate() {
        wx.startLocationUpdate({
            fail: console.error,
        });
        wx.onLocationChange(loc => {
            this.setData({
                location: {
                    latitude: loc.latitude,
                    longitude: loc.longitude
                }
            });
        });
    },
    formatDuration(sec) {
        const padString = (n) => {
            return n < 10 ? '0' + n.toFixed(0) : n.toFixed(0);
        };
        const h = Math.floor(sec / 3600);
        sec = sec - 3600 * h;
        const m = Math.floor(sec / 60);
        sec = sec - m * 60;
        const s = Math.floor(sec);
        return `${padString(h)}:${padString(m)}:${padString(s)}`;
    },
    formatFee(cents) {
        return (cents / 100).toFixed(2);
    },
    setupTimer() {
        let elapsedSec = 0;
        let cent = 0;
        setInterval(() => {
            elapsedSec++;
            cent++;
            this.setData({
                elapsed: this.formatDuration(elapsedSec),
                fee: this.formatFee(cent)
            });
        }, 1000);
    },
    onLoad(opt) {
        const o = opt;
        console.log('trip', o.trip_id);
        this.setupLocationUpdate();
        this.setupTimer();
    },
    onReady() {
    },
    onShow() {
    },
    onHide() {
    },
    onUnload() {
        wx.stopLocationUpdate();
    },
    onPullDownRefresh() {
    },
    onReachBottom() {
    },
    onShareAppMessage() {
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRyaXZpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxNQUFNLFVBQVUsR0FBQyxHQUFHLENBQUE7QUFDcEIsSUFBSSxDQUFDO0lBS0gsSUFBSSxFQUFFO1FBQ0osT0FBTyxFQUFDLFVBQVU7UUFDbEIsR0FBRyxFQUFDLElBQUk7UUFDUixRQUFRLEVBQUM7WUFDUCxRQUFRLEVBQUMsRUFBRTtZQUNYLFNBQVMsRUFBQyxHQUFHO1NBQ2Q7UUFDRCxJQUFJLEVBQUMsRUFBRTtLQUVSO0lBQ0QsbUJBQW1CO1FBQ2pCLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztZQUNyQixJQUFJLEVBQUMsT0FBTyxDQUFDLEtBQUs7U0FDbkIsQ0FBQyxDQUFBO1FBQ0YsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQSxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsUUFBUSxFQUFDO29CQUNQLFFBQVEsRUFBQyxHQUFHLENBQUMsUUFBUTtvQkFDckIsU0FBUyxFQUFDLEdBQUcsQ0FBQyxTQUFTO2lCQUN4QjthQUNGLENBQUMsQ0FBQTtRQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNELGNBQWMsQ0FBQyxHQUFVO1FBQ3ZCLE1BQU0sU0FBUyxHQUFDLENBQUMsQ0FBUSxFQUFDLEVBQUU7WUFDekIsT0FBTyxDQUFDLEdBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxHQUFHLEdBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM1QyxDQUFDLENBQUE7UUFDRCxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxJQUFJLENBQUMsQ0FBQTtRQUM1QixHQUFHLEdBQUMsR0FBRyxHQUFDLElBQUksR0FBQyxDQUFDLENBQUE7UUFDZCxNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBQyxFQUFFLENBQUMsQ0FBQTtRQUMxQixHQUFHLEdBQUMsR0FBRyxHQUFDLENBQUMsR0FBQyxFQUFFLENBQUE7UUFDWixNQUFNLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZCLE9BQU8sR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0lBQzFELENBQUM7SUFDRCxTQUFTLENBQUMsS0FBWTtRQUNwQixPQUFPLENBQUMsS0FBSyxHQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBQ0QsVUFBVTtRQUNSLElBQUksVUFBVSxHQUFDLENBQUMsQ0FBQTtRQUNoQixJQUFJLElBQUksR0FBQyxDQUFDLENBQUE7UUFDVixXQUFXLENBQUMsR0FBRSxFQUFFO1lBQ2QsVUFBVSxFQUFFLENBQUE7WUFDWixJQUFJLEVBQUUsQ0FBQTtZQUNOLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ1gsT0FBTyxFQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO2dCQUN2QyxHQUFHLEVBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7YUFDekIsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFBO0lBQ1QsQ0FBQztJQUlELE1BQU0sQ0FBQyxHQUE0QjtRQUNqQyxNQUFNLENBQUMsR0FBcUIsR0FBRyxDQUFBO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM3QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtRQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDbkIsQ0FBQztJQUtELE9BQU87SUFFUCxDQUFDO0lBS0QsTUFBTTtJQUVOLENBQUM7SUFLRCxNQUFNO0lBRU4sQ0FBQztJQUtELFFBQVE7UUFDTixFQUFFLENBQUMsa0JBQWtCLEVBQUUsQ0FBQTtJQUN6QixDQUFDO0lBS0QsaUJBQWlCO0lBRWpCLENBQUM7SUFLRCxhQUFhO0lBRWIsQ0FBQztJQUtELGlCQUFpQjtJQUVqQixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcm91dGluZyB9IGZyb20gXCIuLi8uLi91dGlscy9yb3V0aW5nXCJcclxuXHJcbi8vIHBhZ2VzL2RyaXZpbmcvZHJpdmluZy50c1xyXG5jb25zdCBjZW50UGVyU2VjPTAuN1xyXG5QYWdlKHtcclxuXHJcbiAgLyoqXHJcbiAgICog6aG16Z2i55qE5Yid5aeL5pWw5o2uXHJcbiAgICovXHJcbiAgZGF0YToge1xyXG4gICAgZWxhcHNlZDonMDA6MDA6MDAnLFxyXG4gICAgZmVlOicwMCcsXHJcbiAgICBsb2NhdGlvbjp7XHJcbiAgICAgIGxhdGl0dWRlOjMxLFxyXG4gICAgICBsb25naXR1ZGU6MTIwLFxyXG4gICAgfSxcclxuICAgIHNjYWw6MTIsXHJcbiAgXHJcbiAgfSxcclxuICBzZXR1cExvY2F0aW9uVXBkYXRlKCl7XHJcbiAgICB3eC5zdGFydExvY2F0aW9uVXBkYXRlKHtcclxuICAgICAgZmFpbDpjb25zb2xlLmVycm9yLFxyXG4gICAgfSlcclxuICAgIHd4Lm9uTG9jYXRpb25DaGFuZ2UobG9jPT57XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgbG9jYXRpb246e1xyXG4gICAgICAgICAgbGF0aXR1ZGU6bG9jLmxhdGl0dWRlLFxyXG4gICAgICAgICAgbG9uZ2l0dWRlOmxvYy5sb25naXR1ZGVcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgZm9ybWF0RHVyYXRpb24oc2VjOm51bWJlcil7XHJcbiAgICBjb25zdCBwYWRTdHJpbmc9KG46bnVtYmVyKT0+e1xyXG4gICAgICAgcmV0dXJuIG48MTA/JzAnK24udG9GaXhlZCgwKTpuLnRvRml4ZWQoMClcclxuICAgIH1cclxuICAgIGNvbnN0IGg9TWF0aC5mbG9vcihzZWMvMzYwMClcclxuICAgIHNlYz1zZWMtMzYwMCpoXHJcbiAgICBjb25zdCBtPU1hdGguZmxvb3Ioc2VjLzYwKVxyXG4gICAgc2VjPXNlYy1tKjYwXHJcbiAgICBjb25zdCBzPU1hdGguZmxvb3Ioc2VjKVxyXG4gICAgcmV0dXJuIGAke3BhZFN0cmluZyhoKX06JHtwYWRTdHJpbmcobSl9OiR7cGFkU3RyaW5nKHMpfWBcclxuICB9LFxyXG4gIGZvcm1hdEZlZShjZW50czpudW1iZXIpe1xyXG4gICAgcmV0dXJuIChjZW50cy8xMDApLnRvRml4ZWQoMilcclxuICB9LFxyXG4gIHNldHVwVGltZXIoKXtcclxuICAgIGxldCBlbGFwc2VkU2VjPTBcclxuICAgIGxldCBjZW50PTBcclxuICAgIHNldEludGVydmFsKCgpPT57XHJcbiAgICAgIGVsYXBzZWRTZWMrK1xyXG4gICAgICBjZW50KytcclxuICAgICAgdGhpcy5zZXREYXRhKHtcclxuICAgICAgICBlbGFwc2VkOnRoaXMuZm9ybWF0RHVyYXRpb24oZWxhcHNlZFNlYyksXHJcbiAgICAgICAgZmVlOnRoaXMuZm9ybWF0RmVlKGNlbnQpXHJcbiAgICAgIH0pXHJcbiAgICB9LDEwMDApXHJcbiAgfSxcclxuICAvKipcclxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouWKoOi9vVxyXG4gICAqL1xyXG4gIG9uTG9hZChvcHQ6UmVjb3JkPCd0cmlwX2lkJyxzdHJpbmc+KSB7XHJcbiAgICBjb25zdCBvOnJvdXRpbmcuRHJpdmluZ09wdHM9b3B0XHJcbiAgICBjb25zb2xlLmxvZygndHJpcCcsby50cmlwX2lkKVxyXG4gICAgdGhpcy5zZXR1cExvY2F0aW9uVXBkYXRlKClcclxuICAgIHRoaXMuc2V0dXBUaW1lcigpXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLliJ3mrKHmuLLmn5PlrozmiJBcclxuICAgKi9cclxuICBvblJlYWR5KCkge1xyXG5cclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiDnlJ/lkb3lkajmnJ/lh73mlbAtLeebkeWQrOmhtemdouaYvuekulxyXG4gICAqL1xyXG4gIG9uU2hvdygpIHtcclxuXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICog55Sf5ZG95ZGo5pyf5Ye95pWwLS3nm5HlkKzpobXpnaLpmpDol49cclxuICAgKi9cclxuICBvbkhpZGUoKSB7XHJcblxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUn+WRveWRqOacn+WHveaVsC0t55uR5ZCs6aG16Z2i5Y246L29XHJcbiAgICovXHJcbiAgb25VbmxvYWQoKSB7XHJcbiAgICB3eC5zdG9wTG9jYXRpb25VcGRhdGUoKVxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOmhtemdouebuOWFs+S6i+S7tuWkhOeQhuWHveaVsC0t55uR5ZCs55So5oi35LiL5ouJ5Yqo5L2cXHJcbiAgICovXHJcbiAgb25QdWxsRG93blJlZnJlc2goKSB7XHJcblxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOmhtemdouS4iuaLieinpuW6leS6i+S7tueahOWkhOeQhuWHveaVsFxyXG4gICAqL1xyXG4gIG9uUmVhY2hCb3R0b20oKSB7XHJcblxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIOeUqOaIt+eCueWHu+WPs+S4iuinkuWIhuS6q1xyXG4gICAqL1xyXG4gIG9uU2hhcmVBcHBNZXNzYWdlKCkge1xyXG5cclxuICB9XHJcbn0pIl19